// Code generated by goa v3.0.10, DO NOT EDIT.
//
// goauth HTTP client CLI support package
//
// Command:
// $ goa gen goauth/design

package cli

import (
	"flag"
	"fmt"
	oauthsecuredc "goauth/gen/http/oauth_secured/client"
	"net/http"
	"os"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `oauth-secured method
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` oauth-secured method --body '{
      "data": "Qui sunt dolor autem."
   }' --oauth-token "Suscipit ab accusamus voluptatibus illum."` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		oauthSecuredFlags = flag.NewFlagSet("oauth-secured", flag.ContinueOnError)

		oauthSecuredMethodFlags          = flag.NewFlagSet("method", flag.ExitOnError)
		oauthSecuredMethodBodyFlag       = oauthSecuredMethodFlags.String("body", "REQUIRED", "")
		oauthSecuredMethodOauthTokenFlag = oauthSecuredMethodFlags.String("oauth-token", "REQUIRED", "")
	)
	oauthSecuredFlags.Usage = oauthSecuredUsage
	oauthSecuredMethodFlags.Usage = oauthSecuredMethodUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "oauth-secured":
			svcf = oauthSecuredFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "oauth-secured":
			switch epn {
			case "method":
				epf = oauthSecuredMethodFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "oauth-secured":
			c := oauthsecuredc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "method":
				endpoint = c.Method()
				data, err = oauthsecuredc.BuildMethodPayload(*oauthSecuredMethodBodyFlag, *oauthSecuredMethodOauthTokenFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// oauth-securedUsage displays the usage of the oauth-secured command and its
// subcommands.
func oauthSecuredUsage() {
	fmt.Fprintf(os.Stderr, `The secured service exposes endpoints that require valid authorization credentials.
Usage:
    %s [globalflags] oauth-secured COMMAND [flags]

COMMAND:
    method: This action requires secured oauth scopes.

Additional help:
    %s oauth-secured COMMAND --help
`, os.Args[0], os.Args[0])
}
func oauthSecuredMethodUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] oauth-secured method -body JSON -oauth-token STRING

This action requires secured oauth scopes.
    -body JSON: 
    -oauth-token STRING: 

Example:
    `+os.Args[0]+` oauth-secured method --body '{
      "data": "Qui sunt dolor autem."
   }' --oauth-token "Suscipit ab accusamus voluptatibus illum."
`, os.Args[0])
}
