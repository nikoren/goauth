// Code generated by goa v3.0.10, DO NOT EDIT.
//
// oauth_secured endpoints
//
// Command:
// $ goa gen goauth/design

package oauthsecured

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Endpoints wraps the "oauth_secured" service endpoints.
type Endpoints struct {
	Method goa.Endpoint
}

// NewEndpoints wraps the methods of the "oauth_secured" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	// Casting service to Auther interface
	a := s.(Auther)
	return &Endpoints{
		Method: NewMethodEndpoint(s, a.OAuth2Auth),
	}
}

// Use applies the given middleware to all the "oauth_secured" service
// endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Method = m(e.Method)
}

// NewMethodEndpoint returns an endpoint function that calls the method
// "method" of service "oauth_secured".
func NewMethodEndpoint(s Service, authOAuth2Fn security.AuthOAuth2Func) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*MethodPayload)
		var err error
		sc := security.OAuth2Scheme{
			Name:           "oauth2",
			Scopes:         []string{"scheduler"},
			RequiredScopes: []string{"scheduler"},
			Flows: []*security.OAuthFlow{
				&security.OAuthFlow{
					Type:             "authorization_code",
					AuthorizationURL: "http://goa.design/authorization",
					TokenURL:         "http://goa.design/token",
					RefreshURL:       "http://goa.design/refresh",
				},
			},
		}
		ctx, err = authOAuth2Fn(ctx, p.OauthToken, &sc)
		if err != nil {
			return nil, err
		}
		return s.Method(ctx, p)
	}
}
